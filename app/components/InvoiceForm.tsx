'use client'

import React, { useState, useRef, useEffect } from 'react'
import { motion } from 'framer-motion'
import { FiPrinter, FiSave, FiTrash2, FiClock, FiUser } from 'react-icons/fi'
import ProductsList from './ProductsList'
import { useReactToPrint } from 'react-to-print'
import { useAuth } from '../context/Authcontext'
import { useRouter } from 'next/navigation'
import toast from 'react-hot-toast'

// Interfaces
interface InvoiceItem {
  id?: string
  description: string
  quantity: number
  price: number
}

interface Product {
  id: string
  name: string
  price: number
  description: string
  category: string
}

interface InvoicePrintContentProps {
  currentDateTime: string
  invoiceNumber: string
  customerName: string
  customerEmail: string
  items: InvoiceItem[]
  total: number
  currentUser: string
}

// Print Component
const InvoicePrintContent = React.forwardRef<HTMLDivElement, InvoicePrintContentProps>(
  ({ currentDateTime, invoiceNumber, customerName, customerEmail, items, total, currentUser }, ref) => {
    return (
      <div ref={ref}>
        <div className="p-8">
          <h1 className="text-2xl font-bold mb-4">INVOICE</h1>
          <div className="mb-6">
            <p>Date: {currentDateTime}</p>
            <p>Invoice #: {invoiceNumber}</p>
          </div>
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2">Bill To:</h2>
            <p>{customerName}</p>
            <p>{customerEmail}</p>
          </div>
          <table className="w-full mb-6">
            <thead>
              <tr className="border-b">
                <th className="text-left py-2">Description</th>
                <th className="text-right py-2">Quantity</th>
                <th className="text-right py-2">Price</th>
                <th className="text-right py-2">Total</th>
              </tr>
            </thead>
            <tbody>
              {items.map((item, index) => (
                <tr key={index} className="border-b">
                  <td className="py-2">{item.description}</td>
                  <td className="text-right py-2">{item.quantity}</td>
                  <td className="text-right py-2">₹{item.price.toFixed(2)}</td>
                  <td className="text-right py-2">
                    ₹{(item.quantity * item.price).toFixed(2)}
                  </td>
                </tr>
              ))}
            </tbody>
            <tfoot>
              <tr>
                <td colSpan={3} className="text-right py-2 font-bold">Total:</td>
                <td className="text-right py-2 font-bold">₹{total.toFixed(2)}</td>
              </tr>
            </tfoot>
          </table>
          <div className="mt-8 text-sm">
            <h3 className="font-bold mb-2">Terms and Conditions:</h3>
            <p>Payment is due within 30 days of invoice date.</p>
            <p className="mt-4">Generated by: {currentUser}</p>
          </div>
        </div>
      </div>
    )
  }
)

InvoicePrintContent.displayName = 'InvoicePrintContent'

// Main Invoice Form Component
export default function InvoiceForm() {
  const [customerName, setCustomerName] = useState('')
  const [customerEmail, setCustomerEmail] = useState('')
  const [items, setItems] = useState<InvoiceItem[]>([])
  const { user, loading } = useAuth()
  const [currentDateTime, setCurrentDateTime] = useState('')
  const invoiceNumber = `INV-${Math.random().toString(36).substr(2, 9).toUpperCase()}`
  const printRef = useRef<HTMLDivElement>(null)
  const router = useRouter()

  useEffect(() => {
    const now = new Date()
    const formatted = now.toISOString().replace('T', ' ').substring(0, 19)
    setCurrentDateTime(formatted)
  }, [])
  
  // Redirect if not authenticated
  useEffect(() => {
    if (!loading && !user) {
      router.push('/login')
    }
  }, [user, loading, router])

  const calculateTotal = () => {
    return items.reduce((sum, item) => sum + item.quantity * item.price, 0)
  }

  const addItem = (product: Product) => {
    const existingItem = items.find(item => item.id === product.id)
    if (existingItem) {
      setItems(items.map(item =>
        item.id === product.id
          ? { ...item, quantity: item.quantity + 1 }
          : item
      ))
    } else {
      setItems([...items, {
        id: product.id,
        description: product.name,
        quantity: 1,
        price: product.price
      }])
    }
  }

  const removeItem = (index: number) => {
    setItems(items.filter((_, i) => i !== index))
  }

  const handlePrint = useReactToPrint({
    content: () => printRef.current!,
    documentTitle: `Invoice_${invoiceNumber}`,
    onAfterPrint: () => console.log('Printed successfully'),
    onError: (err) => console.error('Print failed:', err),
  })
  
  const handleSaveInvoice = async () => {
    if (!user) {
      console.error("User not authenticated")
      return
    }
    
    // Validation
    if (!customerName.trim()) {
      toast.error('Please enter customer name')
      return
    }
    
    if (items.length === 0) {
      toast.error('Please add at least one item to the invoice')
      return
    }
    
    try {
      const invoiceData = {
        invoiceNumber,
        customerName,
        customerEmail,
        items,
        total: calculateTotal(),
        createdBy: user.uid,
        createdAt: new Date().toISOString(),
        createdByName: user.displayName || user.email
      }
      
      const idToken = await user.getIdToken()
      
      toast.loading('Saving invoice...')
      
      const response = await fetch('/api/invoices', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${idToken}`
        },
        body: JSON.stringify(invoiceData)
      })
      
      toast.dismiss()
      
      if (response.ok) {
        toast.success('Invoice saved successfully')
        // Optionally reset form or redirect
      } else {
        const errorData = await response.json()
        toast.error(`Failed to save invoice: ${errorData.error || 'Unknown error'}`)
      }
    } catch (error) {
      toast.dismiss()
      toast.error(`Error saving invoice: ${error instanceof Error ? error.message : 'Unknown error'}`)
      console.error('Error saving invoice:', error)
    }
  }

  // Show loading state while authentication is being checked
  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    )
  }

  // If not authenticated and not redirected yet, show a message
  if (!user) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="text-center p-4 max-w-md">
          <h2 className="text-xl font-semibold mb-2">Authentication Required</h2>
          <p className="text-gray-600 dark:text-gray-400">Please log in to access this page.</p>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header Info */}
      <div className="bg-white dark:bg-gray-800 shadow-lg rounded-lg p-4">
        <div className="flex flex-col sm:flex-row justify-between gap-4">
          <div className="flex items-center space-x-2">
            <FiClock className="text-gray-500 dark:text-gray-400" />
            <span className="text-sm font-medium text-gray-600 dark:text-gray-300">Current UTC Time:</span>
            <span className="text-sm font-mono bg-gray-100 dark:bg-gray-700 px-3 py-1 rounded-md">{currentDateTime}</span>
          </div>
          <div className="flex items-center space-x-2">
            <FiUser className="text-gray-500 dark:text-gray-400" />
            <span className="text-sm font-medium text-gray-600 dark:text-gray-300">Logged in as:</span>
            <span className="text-sm font-mono bg-gray-100 dark:bg-gray-700 px-3 py-1 rounded-md">{user?.displayName || user?.email || 'User'}</span>
          </div>
        </div>
      </div>

      {/* Products */}
      <ProductsList onAddToInvoice={addItem} />

      {/* Invoice Entry Section */}
      <div className="bg-white dark:bg-gray-800 shadow-lg rounded-lg">
        {/* Customer Info */}
        <div className="p-6 border-b dark:border-gray-700">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Customer Name</label>
              <input
                type="text"
                value={customerName}
                onChange={(e) => setCustomerName(e.target.value)}
                className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 
                           focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Customer Email</label>
              <input
                type="email"
                value={customerEmail}
                onChange={(e) => setCustomerEmail(e.target.value)}
                className="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 
                           focus:ring-2 focus:ring-indigo-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              />
            </div>
          </div>
        </div>

        {/* Items Table */}
        <div className="p-6">
          <table className="w-full mb-6">
            <thead>
              <tr className="border-b dark:border-gray-700">
                <th className="text-left py-2">Description</th>
                <th className="text-right py-2">Quantity</th>
                <th className="text-right py-2">Price</th>
                <th className="text-right py-2">Total</th>
                <th className="text-right py-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {items.map((item, index) => (
                <tr key={index} className="border-b dark:border-gray-700">
                  <td className="py-2">{item.description}</td>
                  <td className="text-right py-2">{item.quantity}</td>
                  <td className="text-right py-2">₹{item.price.toFixed(2)}</td>
                  <td className="text-right py-2">₹{(item.quantity * item.price).toFixed(2)}</td>
                  <td className="text-right py-2">
                    <button onClick={() => removeItem(index)} className="text-red-600 hover:text-red-800">
                      <FiTrash2 />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
            <tfoot>
              <tr>
                <td colSpan={3} className="text-right py-2 font-bold">Total:</td>
                <td className="text-right py-2 font-bold">₹{calculateTotal().toFixed(2)}</td>
                <td></td>
              </tr>
            </tfoot>
          </table>
        </div>

        {/* Hidden Print Content */}
        <div style={{ display: 'none' }}>
          <InvoicePrintContent
            ref={printRef}
            currentDateTime={currentDateTime}
            invoiceNumber={invoiceNumber}
            customerName={customerName}
            customerEmail={customerEmail}
            items={items}
            total={calculateTotal()}
            currentUser={user?.displayName || user?.email || 'User'}
          />
        </div>

        {/* Action Buttons */}
        <div className="flex justify-end space-x-4 p-6 border-t dark:border-gray-700">
          <motion.button
            onClick={handlePrint}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600
                       text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700
                       hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            <FiPrinter className="mr-2" />
            Print Invoice
          </motion.button>

          <motion.button
            onClick={handleSaveInvoice}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium
                       rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700
                       dark:bg-indigo-500 dark:hover:bg-indigo-600 focus:outline-none focus:ring-2
                       focus:ring-offset-2 focus:ring-indigo-500"
          >
            <FiSave className="mr-2" />
            Save Invoice
          </motion.button>
        </div>
      </div>
    </div>
  )
}
